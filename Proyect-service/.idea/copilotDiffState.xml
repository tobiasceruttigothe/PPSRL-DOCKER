<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/test/java/DisenoControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/DisenoControllerTest.java" />
              <option name="originalContent" value="import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.paper.controller.DisenoController;&#10;import org.paper.dtoCreate.DisenoCreateDto;&#10;import org.paper.dtoCreate.DisenoUpdateDto;&#10;import org.paper.dtoResponse.DisenoResponseDto;&#10;import org.paper.entity.DisenoStatus;&#10;import org.paper.service.DisenoService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;&#10;import org.springframework.boot.test.mock.mockito.MockBean;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.context.ContextConfiguration;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.Arrays;&#10;import java.util.UUID;&#10;import java.util.Collections;&#10;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.mockito.ArgumentMatchers.eq;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@WebMvcTest(DisenoController.class)&#10;@ContextConfiguration(classes = org.paper.Main.class)&#10;class DisenoControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @MockBean&#10;    private DisenoService disenoService;&#10;&#10;    private UUID usuarioId;&#10;    private DisenoResponseDto disenoResponseDto;&#10;    private DisenoCreateDto disenoCreateDto;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        usuarioId = UUID.randomUUID();&#10;&#10;        disenoResponseDto = DisenoResponseDto.builder()&#10;                .id(1)&#10;                .nombre(&quot;Diseño Test&quot;)&#10;                .descripcion(&quot;Descripción Test&quot;)&#10;                .status(&quot;PROGRESO&quot;)&#10;                .base64Diseno(&quot;base64string&quot;)&#10;                .plantillaId(1)&#10;                .plantillaNombre(&quot;Plantilla Test&quot;)&#10;                .fechaCreacion(LocalDateTime.now())&#10;                .build();&#10;&#10;        disenoCreateDto = new DisenoCreateDto();&#10;        disenoCreateDto.setUsuarioId(usuarioId);&#10;        disenoCreateDto.setPlantillaId(1);&#10;        disenoCreateDto.setNombre(&quot;Nuevo Diseño&quot;);&#10;        disenoCreateDto.setDescripcion(&quot;Nueva Descripción&quot;);&#10;        disenoCreateDto.setBase64Diseno(&quot;base64string&quot;);&#10;    }&#10;&#10;    @Test&#10;    void crearDiseno_DeberiaRetornar201() throws Exception {&#10;        // Arrange&#10;        when(disenoService.save(any(DisenoCreateDto.class))).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(post(&quot;/api/disenos&quot;)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(disenoCreateDto)))&#10;                .andExpect(status().isCreated())&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Diseño Test&quot;));&#10;&#10;        verify(disenoService).save(any(DisenoCreateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void obtenerDisenoPorId_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.findById(1)).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/{id}&quot;, 1))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Diseño Test&quot;))&#10;                .andExpect(jsonPath(&quot;$.data.status&quot;).value(&quot;PROGRESO&quot;));&#10;&#10;        verify(disenoService).findById(1);&#10;    }&#10;&#10;    @Test&#10;    void actualizarDiseno_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        DisenoUpdateDto updateDto = new DisenoUpdateDto();&#10;        updateDto.setNombre(&quot;Diseño Actualizado&quot;);&#10;        updateDto.setDescripcion(&quot;Descripción Actualizada&quot;);&#10;&#10;        when(disenoService.update(eq(1), any(DisenoUpdateDto.class)))&#10;                .thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(put(&quot;/api/disenos/{id}&quot;, 1)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(updateDto)))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).update(eq(1), any(DisenoUpdateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void marcarComoTerminado_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.marcarComoTerminado(1)).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(patch(&quot;/api/disenos/{id}/terminar&quot;, 1))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).marcarComoTerminado(1);&#10;    }&#10;&#10;    @Test&#10;    void marcarComoEnProgreso_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.marcarComoEnProgreso(1)).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(patch(&quot;/api/disenos/{id}/reabrir&quot;, 1))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).marcarComoEnProgreso(1);&#10;    }&#10;&#10;    @Test&#10;    void eliminarDiseno_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        doNothing().when(disenoService).deleteById(1);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(delete(&quot;/api/disenos/{id}&quot;, 1))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void obtenerDisenosPorUsuario_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.findByUsuario(usuarioId))&#10;                .thenReturn(Collections.singletonList(disenoResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}&quot;, usuarioId))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data[0].nombre&quot;).value(&quot;Diseño Test&quot;));&#10;&#10;        verify(disenoService).findByUsuario(usuarioId);&#10;    }&#10;&#10;    @Test&#10;    void obtenerDisenosPorUsuarioYEstado_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.findByUsuarioAndStatus(usuarioId, DisenoStatus.PROGRESO))&#10;                .thenReturn(Collections.singletonList(disenoResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}/status/{status}&quot;,&#10;                        usuarioId, &quot;PROGRESO&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data[0].status&quot;).value(&quot;PROGRESO&quot;));&#10;&#10;        verify(disenoService).findByUsuarioAndStatus(usuarioId, DisenoStatus.PROGRESO);&#10;    }&#10;&#10;    @Test&#10;    void contarDisenosPorUsuario_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.contarDisenosPorUsuario(usuarioId)).thenReturn(3L);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}/count&quot;, usuarioId))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).value(3));&#10;&#10;        verify(disenoService).contarDisenosPorUsuario(usuarioId);&#10;    }&#10;&#10;    @Test&#10;    void contarDisenosPorUsuarioYEstado_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.contarDisenosPorUsuarioYEstado(usuarioId, DisenoStatus.PROGRESO))&#10;                .thenReturn(2L);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}/count/{status}&quot;,&#10;                        usuarioId, &quot;PROGRESO&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).value(2));&#10;&#10;        verify(disenoService).contarDisenosPorUsuarioYEstado(usuarioId, DisenoStatus.PROGRESO);&#10;    }&#10;}" />
              <option name="updatedContent" value="import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.paper.controller.DisenoController;&#10;import org.paper.dtoCreate.DisenoCreateDto;&#10;import org.paper.dtoCreate.DisenoUpdateDto;&#10;import org.paper.dtoResponse.DisenoResponseDto;&#10;import org.paper.entity.DisenoStatus;&#10;import org.paper.service.DisenoService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;&#10;import org.springframework.boot.test.mock.mockito.MockBean;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.context.ContextConfiguration;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;import java.util.Collections;&#10;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.mockito.ArgumentMatchers.eq;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@WebMvcTest(DisenoController.class)&#10;@ContextConfiguration(classes = org.paper.Main.class)&#10;class DisenoControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @MockBean&#10;    private DisenoService disenoService;&#10;&#10;    private UUID usuarioId;&#10;    private DisenoResponseDto disenoResponseDto;&#10;    private DisenoCreateDto disenoCreateDto;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        usuarioId = UUID.randomUUID();&#10;&#10;        disenoResponseDto = DisenoResponseDto.builder()&#10;                .id(1)&#10;                .nombre(&quot;Diseño Test&quot;)&#10;                .descripcion(&quot;Descripción Test&quot;)&#10;                .status(&quot;PROGRESO&quot;)&#10;                .base64Diseno(&quot;base64string&quot;)&#10;                .plantillaId(1)&#10;                .plantillaNombre(&quot;Plantilla Test&quot;)&#10;                .fechaCreacion(LocalDateTime.now())&#10;                .build();&#10;&#10;        disenoCreateDto = new DisenoCreateDto();&#10;        disenoCreateDto.setUsuarioId(usuarioId);&#10;        disenoCreateDto.setPlantillaId(1);&#10;        disenoCreateDto.setNombre(&quot;Nuevo Diseño&quot;);&#10;        disenoCreateDto.setDescripcion(&quot;Nueva Descripción&quot;);&#10;        disenoCreateDto.setBase64Diseno(&quot;base64string&quot;);&#10;    }&#10;&#10;    @Test&#10;    void crearDiseno_DeberiaRetornar201() throws Exception {&#10;        // Arrange&#10;        when(disenoService.save(any(DisenoCreateDto.class))).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(post(&quot;/api/disenos&quot;)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(disenoCreateDto)))&#10;                .andExpect(status().isCreated())&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Diseño Test&quot;));&#10;&#10;        verify(disenoService).save(any(DisenoCreateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void obtenerDisenoPorId_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.findById(1)).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/{id}&quot;, 1))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Diseño Test&quot;))&#10;                .andExpect(jsonPath(&quot;$.data.status&quot;).value(&quot;PROGRESO&quot;));&#10;&#10;        verify(disenoService).findById(1);&#10;    }&#10;&#10;    @Test&#10;    void actualizarDiseno_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        DisenoUpdateDto updateDto = new DisenoUpdateDto();&#10;        updateDto.setNombre(&quot;Diseño Actualizado&quot;);&#10;        updateDto.setDescripcion(&quot;Descripción Actualizada&quot;);&#10;&#10;        when(disenoService.update(eq(1), any(DisenoUpdateDto.class)))&#10;                .thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(put(&quot;/api/disenos/{id}&quot;, 1)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(updateDto)))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).update(eq(1), any(DisenoUpdateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void marcarComoTerminado_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.marcarComoTerminado(1)).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(patch(&quot;/api/disenos/{id}/terminar&quot;, 1))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).marcarComoTerminado(1);&#10;    }&#10;&#10;    @Test&#10;    void marcarComoEnProgreso_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.marcarComoEnProgreso(1)).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(patch(&quot;/api/disenos/{id}/reabrir&quot;, 1))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).marcarComoEnProgreso(1);&#10;    }&#10;&#10;    @Test&#10;    void eliminarDiseno_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        doNothing().when(disenoService).deleteById(1);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(delete(&quot;/api/disenos/{id}&quot;, 1))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void obtenerDisenosPorUsuario_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.findByUsuario(usuarioId))&#10;                .thenReturn(Collections.singletonList(disenoResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}&quot;, usuarioId))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data[0].nombre&quot;).value(&quot;Diseño Test&quot;));&#10;&#10;        verify(disenoService).findByUsuario(usuarioId);&#10;    }&#10;&#10;    @Test&#10;    void obtenerDisenosPorUsuarioYEstado_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.findByUsuarioAndStatus(usuarioId, DisenoStatus.PROGRESO))&#10;                .thenReturn(Collections.singletonList(disenoResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}/status/{status}&quot;,&#10;                        usuarioId, &quot;PROGRESO&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data[0].status&quot;).value(&quot;PROGRESO&quot;));&#10;&#10;        verify(disenoService).findByUsuarioAndStatus(usuarioId, DisenoStatus.PROGRESO);&#10;    }&#10;&#10;    @Test&#10;    void contarDisenosPorUsuario_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.contarDisenosPorUsuario(usuarioId)).thenReturn(3L);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}/count&quot;, usuarioId))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).value(3));&#10;&#10;        verify(disenoService).contarDisenosPorUsuario(usuarioId);&#10;    }&#10;&#10;    @Test&#10;    void contarDisenosPorUsuarioYEstado_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.contarDisenosPorUsuarioYEstado(usuarioId, DisenoStatus.PROGRESO))&#10;                .thenReturn(2L);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}/count/{status}&quot;,&#10;                        usuarioId, &quot;PROGRESO&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).value(2));&#10;&#10;        verify(disenoService).contarDisenosPorUsuarioYEstado(usuarioId, DisenoStatus.PROGRESO);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/TipoBolsaControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/TipoBolsaControllerTest.java" />
              <option name="originalContent" value="import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.paper.controller.TipoBolsaController;&#10;import org.paper.dtoCreate.TipoBolsaCreateDto;&#10;import org.paper.dtoCreate.TipoBolsaUpdateDto;&#10;import org.paper.dtoResponse.TipoBolsaResponseDto;&#10;import org.paper.service.TipoBolsaService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;&#10;import org.springframework.boot.test.mock.mockito.MockBean;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.context.ContextConfiguration;&#10;&#10;import java.util.Arrays;&#10;import java.util.Collections;&#10;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.mockito.ArgumentMatchers.eq;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@WebMvcTest(TipoBolsaController.class)&#10;@ContextConfiguration(classes = org.paper.Main.class)&#10;class TipoBolsaControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @MockBean&#10;    private TipoBolsaService tipoBolsaService;&#10;&#10;    private TipoBolsaResponseDto tipoBolsaResponseDto;&#10;    private TipoBolsaCreateDto tipoBolsaCreateDto;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        tipoBolsaResponseDto = TipoBolsaResponseDto.builder()&#10;                .id(1)&#10;                .nombre(&quot;Bolsa con Asa&quot;)&#10;                .build();&#10;&#10;        tipoBolsaCreateDto = new TipoBolsaCreateDto();&#10;        tipoBolsaCreateDto.setNombre(&quot;Bolsa Sin Asa&quot;);&#10;    }&#10;&#10;    @Test&#10;    void obtenerTiposBolsas_DeberiaRetornar200ConLista() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.findAll())&#10;                .thenReturn(Arrays.asList(tipoBolsaResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isArray())&#10;                .andExpect(jsonPath(&quot;$.data[0].nombre&quot;).value(&quot;Bolsa con Asa&quot;))&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 1 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).findAll();&#10;    }&#10;&#10;    @Test&#10;    void obtenerTiposBolsas_DeberiaRetornar200ConListaVacia() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.findAll()).thenReturn(Collections.emptyList());&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isArray())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isEmpty())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 0 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).findAll();&#10;    }&#10;&#10;    @Test&#10;    void obtenerTipoBolsaPorId_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.findById(1)).thenReturn(tipoBolsaResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa/{id}&quot;, 1))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data.id&quot;).value(1))&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Bolsa con Asa&quot;));&#10;&#10;        verify(tipoBolsaService).findById(1);&#10;    }&#10;&#10;    @Test&#10;    void crearTipoBolsa_DeberiaRetornar201() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.save(any(TipoBolsaCreateDto.class)))&#10;                .thenReturn(tipoBolsaResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(post(&quot;/api/tipos-bolsa&quot;)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(tipoBolsaCreateDto)))&#10;                .andExpect(status().isCreated())&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Bolsa con Asa&quot;))&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Tipo de bolsa creado exitosamente&quot;));&#10;&#10;        verify(tipoBolsaService).save(any(TipoBolsaCreateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void crearTipoBolsa_DeberiaRetornar400CuandoNombreVacio() throws Exception {&#10;        // Arrange&#10;        TipoBolsaCreateDto dtoInvalido = new TipoBolsaCreateDto();&#10;        dtoInvalido.setNombre(&quot;&quot;); // Nombre vacío&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(post(&quot;/api/tipos-bolsa&quot;)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(dtoInvalido)))&#10;                .andExpect(status().isBadRequest());&#10;&#10;        verify(tipoBolsaService, never()).save(any());&#10;    }&#10;&#10;    @Test&#10;    void actualizarTipoBolsa_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        TipoBolsaUpdateDto updateDto = new TipoBolsaUpdateDto();&#10;        updateDto.setNombre(&quot;Bolsa Americana&quot;);&#10;&#10;        when(tipoBolsaService.update(eq(1), any(TipoBolsaUpdateDto.class)))&#10;                .thenReturn(tipoBolsaResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(put(&quot;/api/tipos-bolsa/{id}&quot;, 1)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(updateDto)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Tipo de bolsa actualizado exitosamente&quot;));&#10;&#10;        verify(tipoBolsaService).update(eq(1), any(TipoBolsaUpdateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void eliminarTipoBolsa_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        doNothing().when(tipoBolsaService).deleteById(1);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(delete(&quot;/api/tipos-bolsa/{id}&quot;, 1))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Tipo de bolsa eliminado exitosamente&quot;));&#10;&#10;        verify(tipoBolsaService).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void buscarTiposBolsa_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.searchByNombre(&quot;asa&quot;))&#10;                .thenReturn(Arrays.asList(tipoBolsaResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa/search&quot;)&#10;                        .param(&quot;nombre&quot;, &quot;asa&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data[0].nombre&quot;).value(&quot;Bolsa con Asa&quot;))&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 1 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).searchByNombre(&quot;asa&quot;);&#10;    }&#10;&#10;    @Test&#10;    void buscarTiposBolsa_DeberiaRetornar200ConListaVacia() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.searchByNombre(&quot;noexiste&quot;))&#10;                .thenReturn(Collections.emptyList());&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa/search&quot;)&#10;                        .param(&quot;nombre&quot;, &quot;noexiste&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isEmpty())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 0 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).searchByNombre(&quot;noexiste&quot;);&#10;    }&#10;}" />
              <option name="updatedContent" value="import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.paper.controller.TipoBolsaController;&#10;import org.paper.dtoCreate.TipoBolsaCreateDto;&#10;import org.paper.dtoCreate.TipoBolsaUpdateDto;&#10;import org.paper.dtoResponse.TipoBolsaResponseDto;&#10;import org.paper.service.TipoBolsaService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;&#10;import org.springframework.boot.test.mock.mockito.MockBean;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.context.ContextConfiguration;&#10;&#10;import java.util.Collections;&#10;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.mockito.ArgumentMatchers.eq;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@WebMvcTest(TipoBolsaController.class)&#10;@ContextConfiguration(classes = org.paper.Main.class)&#10;class TipoBolsaControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @MockBean&#10;    private TipoBolsaService tipoBolsaService;&#10;&#10;    private TipoBolsaResponseDto tipoBolsaResponseDto;&#10;    private TipoBolsaCreateDto tipoBolsaCreateDto;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        tipoBolsaResponseDto = TipoBolsaResponseDto.builder()&#10;                .id(1)&#10;                .nombre(&quot;Bolsa con Asa&quot;)&#10;                .build();&#10;&#10;        tipoBolsaCreateDto = new TipoBolsaCreateDto();&#10;        tipoBolsaCreateDto.setNombre(&quot;Bolsa Sin Asa&quot;);&#10;    }&#10;&#10;    @Test&#10;    void obtenerTiposBolsas_DeberiaRetornar200ConLista() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.findAll())&#10;                .thenReturn(Collections.singletonList(tipoBolsaResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isArray())&#10;                .andExpect(jsonPath(&quot;$.data[0].nombre&quot;).value(&quot;Bolsa con Asa&quot;))&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 1 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).findAll();&#10;    }&#10;&#10;    @Test&#10;    void obtenerTiposBolsas_DeberiaRetornar200ConListaVacia() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.findAll()).thenReturn(Collections.emptyList());&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isArray())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isEmpty())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 0 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).findAll();&#10;    }&#10;&#10;    @Test&#10;    void obtenerTipoBolsaPorId_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.findById(1)).thenReturn(tipoBolsaResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa/{id}&quot;, 1))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data.id&quot;).value(1))&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Bolsa con Asa&quot;));&#10;&#10;        verify(tipoBolsaService).findById(1);&#10;    }&#10;&#10;    @Test&#10;    void crearTipoBolsa_DeberiaRetornar201() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.save(any(TipoBolsaCreateDto.class)))&#10;                .thenReturn(tipoBolsaResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(post(&quot;/api/tipos-bolsa&quot;)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(tipoBolsaCreateDto)))&#10;                .andExpect(status().isCreated())&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Bolsa con Asa&quot;))&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Tipo de bolsa creado exitosamente&quot;));&#10;&#10;        verify(tipoBolsaService).save(any(TipoBolsaCreateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void crearTipoBolsa_DeberiaRetornar400CuandoNombreVacio() throws Exception {&#10;        // Arrange&#10;        TipoBolsaCreateDto dtoInvalido = new TipoBolsaCreateDto();&#10;        dtoInvalido.setNombre(&quot;&quot;); // Nombre vacío&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(post(&quot;/api/tipos-bolsa&quot;)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(dtoInvalido)))&#10;                .andExpect(status().isBadRequest());&#10;&#10;        verify(tipoBolsaService, never()).save(any());&#10;    }&#10;&#10;    @Test&#10;    void actualizarTipoBolsa_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        TipoBolsaUpdateDto updateDto = new TipoBolsaUpdateDto();&#10;        updateDto.setNombre(&quot;Bolsa Americana&quot;);&#10;&#10;        when(tipoBolsaService.update(eq(1), any(TipoBolsaUpdateDto.class)))&#10;                .thenReturn(tipoBolsaResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(put(&quot;/api/tipos-bolsa/{id}&quot;, 1)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(updateDto)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Tipo de bolsa actualizado exitosamente&quot;));&#10;&#10;        verify(tipoBolsaService).update(eq(1), any(TipoBolsaUpdateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void eliminarTipoBolsa_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        doNothing().when(tipoBolsaService).deleteById(1);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(delete(&quot;/api/tipos-bolsa/{id}&quot;, 1))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Tipo de bolsa eliminado exitosamente&quot;));&#10;&#10;        verify(tipoBolsaService).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void buscarTiposBolsa_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.searchByNombre(&quot;asa&quot;))&#10;                .thenReturn(Collections.singletonList(tipoBolsaResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa/search&quot;)&#10;                        .param(&quot;nombre&quot;, &quot;asa&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data[0].nombre&quot;).value(&quot;Bolsa con Asa&quot;))&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 1 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).searchByNombre(&quot;asa&quot;);&#10;    }&#10;&#10;    @Test&#10;    void buscarTiposBolsa_DeberiaRetornar200ConListaVacia() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.searchByNombre(&quot;noexiste&quot;))&#10;                .thenReturn(Collections.emptyList());&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa/search&quot;)&#10;                        .param(&quot;nombre&quot;, &quot;noexiste&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isEmpty())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 0 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).searchByNombre(&quot;noexiste&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>