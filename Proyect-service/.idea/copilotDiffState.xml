<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/org/paper/entity/Plantilla.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paper/entity/Plantilla.java" />
              <option name="originalContent" value="package org.paper.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;import java.time.LocalDateTime;&#10;import java.util.HashSet;&#10;import java.util.Set;&#10;&#10;@Getter @Setter&#10;@NoArgsConstructor &#10;@AllArgsConstructor&#10;@EqualsAndHashCode(onlyExplicitlyIncluded = true)&#10;@ToString(exclude = &quot;usuariosHabilitados&quot;)&#10;@Entity @Table(name = &quot;plantillas&quot;)&#10;public class Plantilla {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @EqualsAndHashCode.Include&#10;    private Integer id;&#10;&#10;    @Column(nullable = false, length = 100)&#10;    private String nombre;&#10;&#10;    @ManyToOne(optional = false) @JoinColumn(name = &quot;material_id&quot;)&#10;    private Material material;&#10;&#10;    @ManyToOne(optional = false) @JoinColumn(name = &quot;tipo_bolsa_id&quot;)&#10;    private TipoBolsa tipoBolsa;&#10;&#10;    @Lob&#10;    @Column(name = &quot;base64_plantilla&quot;,nullable = false)&#10;    private String base64Plantilla;&#10;&#10;    @Column(name = &quot;ancho&quot;,nullable = false)&#10;    private Float ancho;&#10;&#10;    @Column(name = &quot;alto&quot;, nullable = false)&#10;    private Float alto;&#10;&#10;    @Column(name = &quot;profundidad&quot;,nullable = false)&#10;    private  Float profundidad;&#10;&#10;    @ManyToMany(mappedBy = &quot;plantillasHabilitadas&quot;)&#10;    private Set&lt;Usuario&gt; usuariosHabilitados = new HashSet&lt;&gt;();&#10;}&#10;" />
              <option name="updatedContent" value="package org.paper.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;import java.time.LocalDateTime;&#10;import java.util.HashSet;&#10;import java.util.Set;&#10;&#10;@Getter @Setter&#10;@NoArgsConstructor &#10;@AllArgsConstructor&#10;@EqualsAndHashCode(onlyExplicitlyIncluded = true)&#10;@ToString(exclude = &quot;usuariosHabilitados&quot;)&#10;@Entity @Table(name = &quot;plantillas&quot;)&#10;public class Plantilla {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @EqualsAndHashCode.Include&#10;    private Integer id;&#10;&#10;    @Column(nullable = false, length = 100)&#10;    private String nombre;&#10;&#10;    @ManyToOne(optional = false) @JoinColumn(name = &quot;material_id&quot;)&#10;    private Material material;&#10;&#10;    @ManyToOne(optional = false) @JoinColumn(name = &quot;tipo_bolsa_id&quot;)&#10;    private TipoBolsa tipoBolsa;&#10;&#10;    @Lob&#10;    @Column(name = &quot;base64_plantilla&quot;,nullable = false)&#10;    private String base64Plantilla;&#10;&#10;    @Column(name = &quot;ancho&quot;,nullable = false)&#10;    private Float ancho;&#10;&#10;    @Column(name = &quot;alto&quot;, nullable = false)&#10;    private Float alto;&#10;&#10;    @Column(name = &quot;profundidad&quot;,nullable = false)&#10;    private  Float profundidad;&#10;&#10;    @ManyToMany(mappedBy = &quot;plantillasHabilitadas&quot;)&#10;    private Set&lt;Usuario&gt; usuariosHabilitados = new HashSet&lt;&gt;();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/paper/service/PlantillaService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/paper/service/PlantillaService.java" />
              <option name="originalContent" value="package org.paper.service;&#10;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.paper.dtoCreate.PlantillaCreateDto;&#10;import org.paper.dtoCreate.PlantillaUpdateDto;&#10;import org.paper.dtoResponse.MaterialResponseDto;&#10;import org.paper.dtoResponse.PlantillaResponseDto;&#10;import org.paper.dtoResponse.PlantillaSimpleDto;&#10;import org.paper.dtoResponse.TipoBolsaResponseDto;&#10;import org.paper.entity.Material;&#10;import org.paper.entity.Plantilla;&#10;import org.paper.entity.TipoBolsa;&#10;import org.paper.entity.Usuario;&#10;import org.paper.exception.EntityNotFoundException;&#10;import org.paper.repository.MaterialRepository;&#10;import org.paper.repository.PlantillaRepository;&#10;import org.paper.repository.TipoBolsaRepository;&#10;import org.paper.repository.UsuarioRepository;&#10;import org.paper.util.Base64ValidatorUtil;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;import java.util.UUID;&#10;import java.util.stream.Collectors;&#10;&#10;@Slf4j&#10;@Service&#10;public class PlantillaService {&#10;&#10;    private final PlantillaRepository plantillaRepository;&#10;    private final MaterialRepository materialRepository;&#10;    private final TipoBolsaRepository tipoBolsaRepository;&#10;    private final UsuarioRepository usuarioRepository;&#10;    private final Base64ValidatorUtil base64Validator;&#10;&#10;    public PlantillaService(PlantillaRepository plantillaRepository,&#10;                            MaterialRepository materialRepository,&#10;                            TipoBolsaRepository tipoBolsaRepository,&#10;                            UsuarioRepository usuarioRepository,&#10;                            Base64ValidatorUtil base64Validator) {&#10;        this.plantillaRepository = plantillaRepository;&#10;        this.materialRepository = materialRepository;&#10;        this.tipoBolsaRepository = tipoBolsaRepository;&#10;        this.usuarioRepository = usuarioRepository;&#10;        this.base64Validator = base64Validator;&#10;    }&#10;&#10;    /**&#10;     * Obtiene todas las plantillas (sin base64 para optimizar)&#10;     */&#10;    public List&lt;PlantillaSimpleDto&gt; findAll() {&#10;        log.debug(&quot;Obteniendo todas las plantillas&quot;);&#10;&#10;        List&lt;Plantilla&gt; plantillas = plantillaRepository.findAll();&#10;&#10;        log.info(&quot;Se encontraron {} plantillas&quot;, plantillas.size());&#10;&#10;        return plantillas.stream()&#10;                .map(this::mapToSimpleDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Obtiene una plantilla completa por ID (con base64)&#10;     */&#10;    public PlantillaResponseDto findById(Integer id) {&#10;        log.debug(&quot;Obteniendo plantilla con ID: {}&quot;, id);&#10;&#10;        Plantilla plantilla = plantillaRepository.findById(id)&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Plantilla no encontrada: {}&quot;, id);&#10;                    return new EntityNotFoundException(&quot;Plantilla&quot;, id);&#10;                });&#10;&#10;        log.debug(&quot;Plantilla encontrada: {}&quot;, plantilla.getNombre());&#10;        return mapToResponseDto(plantilla);&#10;    }&#10;&#10;    /**&#10;     * Crea una nueva plantilla&#10;     */&#10;    @Transactional&#10;    public PlantillaResponseDto save(PlantillaCreateDto dto) {&#10;        log.info(&quot;Iniciando creación de plantilla: {}&quot;, dto.getNombre());&#10;&#10;        // 1. Validar que exista el material&#10;        Material material = materialRepository.findById(dto.getMaterialId())&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Material no encontrado: {}&quot;, dto.getMaterialId());&#10;                    return new EntityNotFoundException(&quot;Material&quot;, dto.getMaterialId());&#10;                });&#10;&#10;        // 2. Validar que exista el tipo de bolsa&#10;        TipoBolsa tipoBolsa = tipoBolsaRepository.findById(dto.getTipoBolsaId())&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Tipo de bolsa no encontrado: {}&quot;, dto.getTipoBolsaId());&#10;                    return new EntityNotFoundException(&quot;Tipo de Bolsa&quot;, dto.getTipoBolsaId());&#10;                });&#10;&#10;        // 3. Validar el base64 usando la utilidad&#10;        base64Validator.validateBase64ForPlantillaOrDiseno(&#10;                dto.getBase64Plantilla(),&#10;                dto.getNombre()&#10;        );&#10;&#10;        // 4. Crear entidad&#10;        Plantilla plantilla = new Plantilla();&#10;        plantilla.setNombre(dto.getNombre());&#10;        plantilla.setMaterial(material);&#10;        plantilla.setTipoBolsa(tipoBolsa);&#10;        plantilla.setBase64Plantilla(dto.getBase64Plantilla());&#10;        plantilla.setAncho(dto.getAncho());&#10;        plantilla.setAlto(dto.getAlto());&#10;        plantilla.setProfundidad(dto.getProfundidad());&#10;&#10;        // 5. Guardar&#10;        Plantilla savedPlantilla = plantillaRepository.save(plantilla);&#10;&#10;        log.info(&quot;Plantilla creada exitosamente con ID: {}&quot;, savedPlantilla.getId());&#10;&#10;        return mapToResponseDto(savedPlantilla);&#10;    }&#10;&#10;    /**&#10;     * Actualiza una plantilla existente&#10;     */&#10;    @Transactional&#10;    public PlantillaResponseDto update(Integer id, PlantillaUpdateDto dto) {&#10;        log.info(&quot;Iniciando actualización de plantilla con ID: {}&quot;, id);&#10;&#10;        // 1. Buscar la plantilla&#10;        Plantilla plantilla = plantillaRepository.findById(id)&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Plantilla no encontrada: {}&quot;, id);&#10;                    return new EntityNotFoundException(&quot;Plantilla&quot;, id);&#10;                });&#10;&#10;        // 2. Validar que exista el material&#10;        Material material = materialRepository.findById(dto.getMaterialId())&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Material no encontrado: {}&quot;, dto.getMaterialId());&#10;                    return new EntityNotFoundException(&quot;Material&quot;, dto.getMaterialId());&#10;                });&#10;&#10;        // 3. Validar que exista el tipo de bolsa&#10;        TipoBolsa tipoBolsa = tipoBolsaRepository.findById(dto.getTipoBolsaId())&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Tipo de bolsa no encontrado: {}&quot;, dto.getTipoBolsaId());&#10;                    return new EntityNotFoundException(&quot;Tipo de Bolsa&quot;, dto.getTipoBolsaId());&#10;                });&#10;&#10;        // 4. Actualizar datos básicos&#10;        plantilla.setNombre(dto.getNombre());&#10;        plantilla.setMaterial(material);&#10;        plantilla.setTipoBolsa(tipoBolsa);&#10;        plantilla.setAncho(dto.getAncho());&#10;        plantilla.setAlto(dto.getAlto());&#10;        plantilla.setProfundidad(dto.getProfundidad());&#10;&#10;        // 5. Si viene nueva imagen, actualizar usando la utilidad&#10;        if (dto.getBase64Plantilla() != null &amp;&amp; !dto.getBase64Plantilla().isEmpty()) {&#10;            base64Validator.validateBase64ForPlantillaOrDiseno(&#10;                    dto.getBase64Plantilla(),&#10;                    dto.getNombre()&#10;            );&#10;            plantilla.setBase64Plantilla(dto.getBase64Plantilla());&#10;            log.debug(&quot;Imagen de la plantilla actualizada&quot;);&#10;        }&#10;&#10;        // 6. Guardar&#10;        Plantilla updatedPlantilla = plantillaRepository.save(plantilla);&#10;&#10;        log.info(&quot;Plantilla actualizada exitosamente: {}&quot;, id);&#10;&#10;        return mapToResponseDto(updatedPlantilla);&#10;    }&#10;&#10;    /**&#10;     * Elimina una plantilla&#10;     */&#10;    @Transactional&#10;    public void deleteById(Integer id) {&#10;        log.info(&quot;Iniciando eliminación de plantilla con ID: {}&quot;, id);&#10;&#10;        if (!plantillaRepository.existsById(id)) {&#10;            log.error(&quot;Plantilla no encontrada: {}&quot;, id);&#10;            throw new EntityNotFoundException(&quot;Plantilla&quot;, id);&#10;        }&#10;&#10;        plantillaRepository.deleteById(id);&#10;&#10;        log.info(&quot;Plantilla eliminada exitosamente: {}&quot;, id);&#10;    }&#10;&#10;    /**&#10;     * Busca plantillas por material&#10;     */&#10;    public List&lt;PlantillaSimpleDto&gt; findByMaterial(Integer materialId) {&#10;        log.debug(&quot;Buscando plantillas del material: {}&quot;, materialId);&#10;&#10;        if (!materialRepository.existsById(materialId)) {&#10;            log.error(&quot;Material no encontrado: {}&quot;, materialId);&#10;            throw new EntityNotFoundException(&quot;Material&quot;, materialId);&#10;        }&#10;&#10;        List&lt;Plantilla&gt; plantillas = plantillaRepository.findByMaterialId(materialId);&#10;&#10;        log.info(&quot;Se encontraron {} plantillas para el material: {}&quot;, plantillas.size(), materialId);&#10;&#10;        return plantillas.stream()&#10;                .map(this::mapToSimpleDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Busca plantillas por tipo de bolsa&#10;     */&#10;    public List&lt;PlantillaSimpleDto&gt; findByTipoBolsa(Integer tipoBolsaId) {&#10;        log.debug(&quot;Buscando plantillas del tipo de bolsa: {}&quot;, tipoBolsaId);&#10;&#10;        if (!tipoBolsaRepository.existsById(tipoBolsaId)) {&#10;            log.error(&quot;Tipo de bolsa no encontrado: {}&quot;, tipoBolsaId);&#10;            throw new EntityNotFoundException(&quot;Tipo de Bolsa&quot;, tipoBolsaId);&#10;        }&#10;&#10;        List&lt;Plantilla&gt; plantillas = plantillaRepository.findByTipoBolsaId(tipoBolsaId);&#10;&#10;        log.info(&quot;Se encontraron {} plantillas para el tipo de bolsa: {}&quot;, plantillas.size(), tipoBolsaId);&#10;&#10;        return plantillas.stream()&#10;                .map(this::mapToSimpleDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Busca plantillas por nombre (búsqueda parcial)&#10;     */&#10;    public List&lt;PlantillaSimpleDto&gt; searchByNombre(String nombre) {&#10;        log.debug(&quot;Buscando plantillas que contengan: {}&quot;, nombre);&#10;&#10;        List&lt;Plantilla&gt; plantillas = plantillaRepository.findByNombreContainingIgnoreCase(nombre);&#10;&#10;        log.info(&quot;Se encontraron {} plantillas con el criterio: {}&quot;, plantillas.size(), nombre);&#10;&#10;        return plantillas.stream()&#10;                .map(this::mapToSimpleDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Habilita una plantilla para un usuario&#10;     */&#10;    @Transactional&#10;    public void habilitarPlantillaParaUsuario(Integer plantillaId, UUID usuarioId) {&#10;        log.info(&quot;Habilitando plantilla {} para usuario {}&quot;, plantillaId, usuarioId);&#10;&#10;        Plantilla plantilla = plantillaRepository.findById(plantillaId)&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Plantilla no encontrada: {}&quot;, plantillaId);&#10;                    return new EntityNotFoundException(&quot;Plantilla&quot;, plantillaId);&#10;                });&#10;&#10;        Usuario usuario = usuarioRepository.findById(usuarioId)&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Usuario no encontrado: {}&quot;, usuarioId);&#10;                    return new EntityNotFoundException(&quot;Usuario&quot;, usuarioId);&#10;                });&#10;&#10;        // ✅ CORRECCIÓN: Modificar el lado propietario (Usuario) en lugar del lado inverso (Plantilla)&#10;        usuario.getPlantillasHabilitadas().add(plantilla);&#10;        usuarioRepository.save(usuario);&#10;&#10;        log.info(&quot;Plantilla {} habilitada para usuario {}&quot;, plantillaId, usuarioId);&#10;    }&#10;&#10;    /**&#10;     * Deshabilita una plantilla para un usuario&#10;     */&#10;    @Transactional&#10;    public void deshabilitarPlantillaParaUsuario(Integer plantillaId, UUID usuarioId) {&#10;        log.info(&quot;Deshabilitando plantilla {} para usuario {}&quot;, plantillaId, usuarioId);&#10;&#10;        Plantilla plantilla = plantillaRepository.findById(plantillaId)&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Plantilla no encontrada: {}&quot;, plantillaId);&#10;                    return new EntityNotFoundException(&quot;Plantilla&quot;, plantillaId);&#10;                });&#10;&#10;        Usuario usuario = usuarioRepository.findById(usuarioId)&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Usuario no encontrado: {}&quot;, usuarioId);&#10;                    return new EntityNotFoundException(&quot;Usuario&quot;, usuarioId);&#10;                });&#10;&#10;        // ✅ CORRECCIÓN: Modificar el lado propietario (Usuario) en lugar del lado inverso (Plantilla)&#10;        usuario.getPlantillasHabilitadas().remove(plantilla);&#10;        usuarioRepository.save(usuario);&#10;&#10;        log.info(&quot;Plantilla {} deshabilitada para usuario {}&quot;, plantillaId, usuarioId);&#10;    }&#10;&#10;    /**&#10;     * Obtiene las plantillas habilitadas para un usuario&#10;     */&#10;    @Transactional(readOnly = true)&#10;    public List&lt;PlantillaSimpleDto&gt; findPlantillasHabilitadasParaUsuario(UUID usuarioId) {&#10;        log.debug(&quot;Obteniendo plantillas habilitadas para usuario: {}&quot;, usuarioId);&#10;&#10;        if (!usuarioRepository.existsById(usuarioId)) {&#10;            log.error(&quot;Usuario no encontrado: {}&quot;, usuarioId);&#10;            throw new EntityNotFoundException(&quot;Usuario&quot;, usuarioId);&#10;        }&#10;&#10;        List&lt;Plantilla&gt; plantillas = plantillaRepository.findByUsuariosHabilitadosId(usuarioId);&#10;&#10;        log.info(&quot;Se encontraron {} plantillas habilitadas para el usuario: {}&quot;, plantillas.size(), usuarioId);&#10;&#10;        return plantillas.stream()&#10;                .map(this::mapToSimpleDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    // ==================== MÉTODOS PRIVADOS ====================&#10;&#10;    /**&#10;     * Mapea entidad a DTO de respuesta completo&#10;     */&#10;    private PlantillaResponseDto mapToResponseDto(Plantilla plantilla) {&#10;        return PlantillaResponseDto.builder()&#10;                .id(plantilla.getId())&#10;                .nombre(plantilla.getNombre())&#10;                .base64Plantilla(plantilla.getBase64Plantilla())&#10;                .material(MaterialResponseDto.builder()&#10;                        .id(plantilla.getMaterial().getId())&#10;                        .nombre(plantilla.getMaterial().getNombre())&#10;                        .build())&#10;                .tipoBolsa(TipoBolsaResponseDto.builder()&#10;                        .id(plantilla.getTipoBolsa().getId())&#10;                        .nombre(plantilla.getTipoBolsa().getNombre())&#10;                        .build())&#10;                .ancho(plantilla.getAncho())&#10;                .alto(plantilla.getAlto())&#10;                .profundidad(plantilla.getProfundidad())&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Mapea entidad a DTO simple (sin base64)&#10;     */&#10;    private PlantillaSimpleDto mapToSimpleDto(Plantilla plantilla) {&#10;        return PlantillaSimpleDto.builder()&#10;                .id(plantilla.getId())&#10;                .nombre(plantilla.getNombre())&#10;                .materialNombre(plantilla.getMaterial().getNombre())&#10;                .tipoBolsaNombre(plantilla.getTipoBolsa().getNombre())&#10;                .ancho(plantilla.getAncho())&#10;                .alto(plantilla.getAlto())&#10;                .profundidad(plantilla.getProfundidad())&#10;                .build();&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.paper.service;&#10;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.paper.dtoCreate.PlantillaCreateDto;&#10;import org.paper.dtoCreate.PlantillaUpdateDto;&#10;import org.paper.dtoResponse.MaterialResponseDto;&#10;import org.paper.dtoResponse.PlantillaResponseDto;&#10;import org.paper.dtoResponse.PlantillaSimpleDto;&#10;import org.paper.dtoResponse.TipoBolsaResponseDto;&#10;import org.paper.entity.Material;&#10;import org.paper.entity.Plantilla;&#10;import org.paper.entity.TipoBolsa;&#10;import org.paper.entity.Usuario;&#10;import org.paper.exception.EntityNotFoundException;&#10;import org.paper.repository.MaterialRepository;&#10;import org.paper.repository.PlantillaRepository;&#10;import org.paper.repository.TipoBolsaRepository;&#10;import org.paper.repository.UsuarioRepository;&#10;import org.paper.util.Base64ValidatorUtil;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;import java.util.UUID;&#10;import java.util.stream.Collectors;&#10;&#10;@Slf4j&#10;@Service&#10;public class PlantillaService {&#10;&#10;    private final PlantillaRepository plantillaRepository;&#10;    private final MaterialRepository materialRepository;&#10;    private final TipoBolsaRepository tipoBolsaRepository;&#10;    private final UsuarioRepository usuarioRepository;&#10;    private final Base64ValidatorUtil base64Validator;&#10;&#10;    public PlantillaService(PlantillaRepository plantillaRepository,&#10;                            MaterialRepository materialRepository,&#10;                            TipoBolsaRepository tipoBolsaRepository,&#10;                            UsuarioRepository usuarioRepository,&#10;                            Base64ValidatorUtil base64Validator) {&#10;        this.plantillaRepository = plantillaRepository;&#10;        this.materialRepository = materialRepository;&#10;        this.tipoBolsaRepository = tipoBolsaRepository;&#10;        this.usuarioRepository = usuarioRepository;&#10;        this.base64Validator = base64Validator;&#10;    }&#10;&#10;    /**&#10;     * Obtiene todas las plantillas (sin base64 para optimizar)&#10;     */&#10;    public List&lt;PlantillaSimpleDto&gt; findAll() {&#10;        log.debug(&quot;Obteniendo todas las plantillas&quot;);&#10;&#10;        List&lt;Plantilla&gt; plantillas = plantillaRepository.findAll();&#10;&#10;        log.info(&quot;Se encontraron {} plantillas&quot;, plantillas.size());&#10;&#10;        return plantillas.stream()&#10;                .map(this::mapToSimpleDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Obtiene una plantilla completa por ID (con base64)&#10;     */&#10;    public PlantillaResponseDto findById(Integer id) {&#10;        log.debug(&quot;Obteniendo plantilla con ID: {}&quot;, id);&#10;&#10;        Plantilla plantilla = plantillaRepository.findById(id)&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Plantilla no encontrada: {}&quot;, id);&#10;                    return new EntityNotFoundException(&quot;Plantilla&quot;, id);&#10;                });&#10;&#10;        log.debug(&quot;Plantilla encontrada: {}&quot;, plantilla.getNombre());&#10;        return mapToResponseDto(plantilla);&#10;    }&#10;&#10;    /**&#10;     * Crea una nueva plantilla&#10;     */&#10;    @Transactional&#10;    public PlantillaResponseDto save(PlantillaCreateDto dto) {&#10;        log.info(&quot;Iniciando creación de plantilla: {}&quot;, dto.getNombre());&#10;&#10;        // 1. Validar que exista el material&#10;        Material material = materialRepository.findById(dto.getMaterialId())&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Material no encontrado: {}&quot;, dto.getMaterialId());&#10;                    return new EntityNotFoundException(&quot;Material&quot;, dto.getMaterialId());&#10;                });&#10;&#10;        // 2. Validar que exista el tipo de bolsa&#10;        TipoBolsa tipoBolsa = tipoBolsaRepository.findById(dto.getTipoBolsaId())&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Tipo de bolsa no encontrado: {}&quot;, dto.getTipoBolsaId());&#10;                    return new EntityNotFoundException(&quot;Tipo de Bolsa&quot;, dto.getTipoBolsaId());&#10;                });&#10;&#10;        // 3. Validar el base64 usando la utilidad&#10;        base64Validator.validateBase64ForPlantillaOrDiseno(&#10;                dto.getBase64Plantilla(),&#10;                dto.getNombre()&#10;        );&#10;&#10;        // 4. Crear entidad&#10;        Plantilla plantilla = new Plantilla();&#10;        plantilla.setNombre(dto.getNombre());&#10;        plantilla.setMaterial(material);&#10;        plantilla.setTipoBolsa(tipoBolsa);&#10;        plantilla.setBase64Plantilla(dto.getBase64Plantilla());&#10;        plantilla.setAncho(dto.getAncho());&#10;        plantilla.setAlto(dto.getAlto());&#10;        plantilla.setProfundidad(dto.getProfundidad());&#10;&#10;        // 5. Guardar&#10;        Plantilla savedPlantilla = plantillaRepository.save(plantilla);&#10;&#10;        log.info(&quot;Plantilla creada exitosamente con ID: {}&quot;, savedPlantilla.getId());&#10;&#10;        return mapToResponseDto(savedPlantilla);&#10;    }&#10;&#10;    /**&#10;     * Actualiza una plantilla existente&#10;     */&#10;    @Transactional&#10;    public PlantillaResponseDto update(Integer id, PlantillaUpdateDto dto) {&#10;        log.info(&quot;Iniciando actualización de plantilla con ID: {}&quot;, id);&#10;&#10;        // 1. Buscar la plantilla&#10;        Plantilla plantilla = plantillaRepository.findById(id)&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Plantilla no encontrada: {}&quot;, id);&#10;                    return new EntityNotFoundException(&quot;Plantilla&quot;, id);&#10;                });&#10;&#10;        // 2. Validar que exista el material&#10;        Material material = materialRepository.findById(dto.getMaterialId())&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Material no encontrado: {}&quot;, dto.getMaterialId());&#10;                    return new EntityNotFoundException(&quot;Material&quot;, dto.getMaterialId());&#10;                });&#10;&#10;        // 3. Validar que exista el tipo de bolsa&#10;        TipoBolsa tipoBolsa = tipoBolsaRepository.findById(dto.getTipoBolsaId())&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Tipo de bolsa no encontrado: {}&quot;, dto.getTipoBolsaId());&#10;                    return new EntityNotFoundException(&quot;Tipo de Bolsa&quot;, dto.getTipoBolsaId());&#10;                });&#10;&#10;        // 4. Actualizar datos básicos&#10;        plantilla.setNombre(dto.getNombre());&#10;        plantilla.setMaterial(material);&#10;        plantilla.setTipoBolsa(tipoBolsa);&#10;        plantilla.setAncho(dto.getAncho());&#10;        plantilla.setAlto(dto.getAlto());&#10;        plantilla.setProfundidad(dto.getProfundidad());&#10;&#10;        // 5. Si viene nueva imagen, actualizar usando la utilidad&#10;        if (dto.getBase64Plantilla() != null &amp;&amp; !dto.getBase64Plantilla().isEmpty()) {&#10;            base64Validator.validateBase64ForPlantillaOrDiseno(&#10;                    dto.getBase64Plantilla(),&#10;                    dto.getNombre()&#10;            );&#10;            plantilla.setBase64Plantilla(dto.getBase64Plantilla());&#10;            log.debug(&quot;Imagen de la plantilla actualizada&quot;);&#10;        }&#10;&#10;        // 6. Guardar&#10;        Plantilla updatedPlantilla = plantillaRepository.save(plantilla);&#10;&#10;        log.info(&quot;Plantilla actualizada exitosamente: {}&quot;, id);&#10;&#10;        return mapToResponseDto(updatedPlantilla);&#10;    }&#10;&#10;    /**&#10;     * Elimina una plantilla&#10;     */&#10;    @Transactional&#10;    public void deleteById(Integer id) {&#10;        log.info(&quot;Iniciando eliminación de plantilla con ID: {}&quot;, id);&#10;&#10;        if (!plantillaRepository.existsById(id)) {&#10;            log.error(&quot;Plantilla no encontrada: {}&quot;, id);&#10;            throw new EntityNotFoundException(&quot;Plantilla&quot;, id);&#10;        }&#10;&#10;        plantillaRepository.deleteById(id);&#10;&#10;        log.info(&quot;Plantilla eliminada exitosamente: {}&quot;, id);&#10;    }&#10;&#10;    /**&#10;     * Busca plantillas por material&#10;     */&#10;    public List&lt;PlantillaSimpleDto&gt; findByMaterial(Integer materialId) {&#10;        log.debug(&quot;Buscando plantillas del material: {}&quot;, materialId);&#10;&#10;        if (!materialRepository.existsById(materialId)) {&#10;            log.error(&quot;Material no encontrado: {}&quot;, materialId);&#10;            throw new EntityNotFoundException(&quot;Material&quot;, materialId);&#10;        }&#10;&#10;        List&lt;Plantilla&gt; plantillas = plantillaRepository.findByMaterialId(materialId);&#10;&#10;        log.info(&quot;Se encontraron {} plantillas para el material: {}&quot;, plantillas.size(), materialId);&#10;&#10;        return plantillas.stream()&#10;                .map(this::mapToSimpleDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Busca plantillas por tipo de bolsa&#10;     */&#10;    public List&lt;PlantillaSimpleDto&gt; findByTipoBolsa(Integer tipoBolsaId) {&#10;        log.debug(&quot;Buscando plantillas del tipo de bolsa: {}&quot;, tipoBolsaId);&#10;&#10;        if (!tipoBolsaRepository.existsById(tipoBolsaId)) {&#10;            log.error(&quot;Tipo de bolsa no encontrado: {}&quot;, tipoBolsaId);&#10;            throw new EntityNotFoundException(&quot;Tipo de Bolsa&quot;, tipoBolsaId);&#10;        }&#10;&#10;        List&lt;Plantilla&gt; plantillas = plantillaRepository.findByTipoBolsaId(tipoBolsaId);&#10;&#10;        log.info(&quot;Se encontraron {} plantillas para el tipo de bolsa: {}&quot;, plantillas.size(), tipoBolsaId);&#10;&#10;        return plantillas.stream()&#10;                .map(this::mapToSimpleDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Busca plantillas por nombre (búsqueda parcial)&#10;     */&#10;    public List&lt;PlantillaSimpleDto&gt; searchByNombre(String nombre) {&#10;        log.debug(&quot;Buscando plantillas que contengan: {}&quot;, nombre);&#10;&#10;        List&lt;Plantilla&gt; plantillas = plantillaRepository.findByNombreContainingIgnoreCase(nombre);&#10;&#10;        log.info(&quot;Se encontraron {} plantillas con el criterio: {}&quot;, plantillas.size(), nombre);&#10;&#10;        return plantillas.stream()&#10;                .map(this::mapToSimpleDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Habilita una plantilla para un usuario&#10;     */&#10;    @Transactional&#10;    public void habilitarPlantillaParaUsuario(Integer plantillaId, UUID usuarioId) {&#10;        log.info(&quot;Habilitando plantilla {} para usuario {}&quot;, plantillaId, usuarioId);&#10;&#10;        Plantilla plantilla = plantillaRepository.findById(plantillaId)&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Plantilla no encontrada: {}&quot;, plantillaId);&#10;                    return new EntityNotFoundException(&quot;Plantilla&quot;, plantillaId);&#10;                });&#10;&#10;        Usuario usuario = usuarioRepository.findById(usuarioId)&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Usuario no encontrado: {}&quot;, usuarioId);&#10;                    return new EntityNotFoundException(&quot;Usuario&quot;, usuarioId);&#10;                });&#10;&#10;        // ✅ CORRECCIÓN: Modificar el lado propietario (Usuario) en lugar del lado inverso (Plantilla)&#10;        usuario.getPlantillasHabilitadas().add(plantilla);&#10;        usuarioRepository.save(usuario);&#10;&#10;        log.info(&quot;Plantilla {} habilitada para usuario {}&quot;, plantillaId, usuarioId);&#10;    }&#10;&#10;    /**&#10;     * Deshabilita una plantilla para un usuario&#10;     */&#10;    @Transactional&#10;    public void deshabilitarPlantillaParaUsuario(Integer plantillaId, UUID usuarioId) {&#10;        log.info(&quot;Deshabilitando plantilla {} para usuario {}&quot;, plantillaId, usuarioId);&#10;&#10;        Plantilla plantilla = plantillaRepository.findById(plantillaId)&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Plantilla no encontrada: {}&quot;, plantillaId);&#10;                    return new EntityNotFoundException(&quot;Plantilla&quot;, plantillaId);&#10;                });&#10;&#10;        Usuario usuario = usuarioRepository.findById(usuarioId)&#10;                .orElseThrow(() -&gt; {&#10;                    log.error(&quot;Usuario no encontrado: {}&quot;, usuarioId);&#10;                    return new EntityNotFoundException(&quot;Usuario&quot;, usuarioId);&#10;                });&#10;&#10;        // ✅ CORRECCIÓN: Modificar el lado propietario (Usuario) en lugar del lado inverso (Plantilla)&#10;        usuario.getPlantillasHabilitadas().remove(plantilla);&#10;        usuarioRepository.save(usuario);&#10;&#10;        log.info(&quot;Plantilla {} deshabilitada para usuario {}&quot;, plantillaId, usuarioId);&#10;    }&#10;&#10;    /**&#10;     * Obtiene las plantillas habilitadas para un usuario&#10;     */&#10;    @Transactional(readOnly = true)&#10;    public List&lt;PlantillaSimpleDto&gt; findPlantillasHabilitadasParaUsuario(UUID usuarioId) {&#10;        log.debug(&quot;Obteniendo plantillas habilitadas para usuario: {}&quot;, usuarioId);&#10;&#10;        if (!usuarioRepository.existsById(usuarioId)) {&#10;            log.error(&quot;Usuario no encontrado: {}&quot;, usuarioId);&#10;            throw new EntityNotFoundException(&quot;Usuario&quot;, usuarioId);&#10;        }&#10;&#10;        List&lt;Plantilla&gt; plantillas = plantillaRepository.findByUsuariosHabilitadosId(usuarioId);&#10;&#10;        log.info(&quot;Se encontraron {} plantillas habilitadas para el usuario: {}&quot;, plantillas.size(), usuarioId);&#10;&#10;        return plantillas.stream()&#10;                .map(this::mapToSimpleDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    // ==================== MÉTODOS PRIVADOS ====================&#10;&#10;    /**&#10;     * Mapea entidad a DTO de respuesta completo&#10;     */&#10;    private PlantillaResponseDto mapToResponseDto(Plantilla plantilla) {&#10;        return PlantillaResponseDto.builder()&#10;                .id(plantilla.getId())&#10;                .nombre(plantilla.getNombre())&#10;                .base64Plantilla(plantilla.getBase64Plantilla())&#10;                .material(MaterialResponseDto.builder()&#10;                        .id(plantilla.getMaterial().getId())&#10;                        .nombre(plantilla.getMaterial().getNombre())&#10;                        .build())&#10;                .tipoBolsa(TipoBolsaResponseDto.builder()&#10;                        .id(plantilla.getTipoBolsa().getId())&#10;                        .nombre(plantilla.getTipoBolsa().getNombre())&#10;                        .build())&#10;                .ancho(plantilla.getAncho())&#10;                .alto(plantilla.getAlto())&#10;                .profundidad(plantilla.getProfundidad())&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Mapea entidad a DTO simple (sin base64)&#10;     */&#10;    private PlantillaSimpleDto mapToSimpleDto(Plantilla plantilla) {&#10;        return PlantillaSimpleDto.builder()&#10;                .id(plantilla.getId())&#10;                .nombre(plantilla.getNombre())&#10;                .materialNombre(plantilla.getMaterial().getNombre())&#10;                .tipoBolsaNombre(plantilla.getTipoBolsa().getNombre())&#10;                .ancho(plantilla.getAncho())&#10;                .alto(plantilla.getAlto())&#10;                .profundidad(plantilla.getProfundidad())&#10;                .build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/DisenoControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/DisenoControllerTest.java" />
              <option name="originalContent" value="import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.paper.controller.DisenoController;&#10;import org.paper.dtoCreate.DisenoCreateDto;&#10;import org.paper.dtoCreate.DisenoUpdateDto;&#10;import org.paper.dtoResponse.DisenoResponseDto;&#10;import org.paper.entity.DisenoStatus;&#10;import org.paper.service.DisenoService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;&#10;import org.springframework.boot.test.mock.mockito.MockBean;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.context.ContextConfiguration;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.Arrays;&#10;import java.util.UUID;&#10;import java.util.Collections;&#10;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.mockito.ArgumentMatchers.eq;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@WebMvcTest(DisenoController.class)&#10;@ContextConfiguration(classes = org.paper.Main.class)&#10;class DisenoControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @MockBean&#10;    private DisenoService disenoService;&#10;&#10;    private UUID usuarioId;&#10;    private DisenoResponseDto disenoResponseDto;&#10;    private DisenoCreateDto disenoCreateDto;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        usuarioId = UUID.randomUUID();&#10;&#10;        disenoResponseDto = DisenoResponseDto.builder()&#10;                .id(1)&#10;                .nombre(&quot;Diseño Test&quot;)&#10;                .descripcion(&quot;Descripción Test&quot;)&#10;                .status(&quot;PROGRESO&quot;)&#10;                .base64Diseno(&quot;base64string&quot;)&#10;                .plantillaId(1)&#10;                .plantillaNombre(&quot;Plantilla Test&quot;)&#10;                .fechaCreacion(LocalDateTime.now())&#10;                .build();&#10;&#10;        disenoCreateDto = new DisenoCreateDto();&#10;        disenoCreateDto.setUsuarioId(usuarioId);&#10;        disenoCreateDto.setPlantillaId(1);&#10;        disenoCreateDto.setNombre(&quot;Nuevo Diseño&quot;);&#10;        disenoCreateDto.setDescripcion(&quot;Nueva Descripción&quot;);&#10;        disenoCreateDto.setBase64Diseno(&quot;base64string&quot;);&#10;    }&#10;&#10;    @Test&#10;    void crearDiseno_DeberiaRetornar201() throws Exception {&#10;        // Arrange&#10;        when(disenoService.save(any(DisenoCreateDto.class))).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(post(&quot;/api/disenos&quot;)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(disenoCreateDto)))&#10;                .andExpect(status().isCreated())&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Diseño Test&quot;));&#10;&#10;        verify(disenoService).save(any(DisenoCreateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void obtenerDisenoPorId_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.findById(1)).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/{id}&quot;, 1))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Diseño Test&quot;))&#10;                .andExpect(jsonPath(&quot;$.data.status&quot;).value(&quot;PROGRESO&quot;));&#10;&#10;        verify(disenoService).findById(1);&#10;    }&#10;&#10;    @Test&#10;    void actualizarDiseno_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        DisenoUpdateDto updateDto = new DisenoUpdateDto();&#10;        updateDto.setNombre(&quot;Diseño Actualizado&quot;);&#10;        updateDto.setDescripcion(&quot;Descripción Actualizada&quot;);&#10;&#10;        when(disenoService.update(eq(1), any(DisenoUpdateDto.class)))&#10;                .thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(put(&quot;/api/disenos/{id}&quot;, 1)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(updateDto)))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).update(eq(1), any(DisenoUpdateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void marcarComoTerminado_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.marcarComoTerminado(1)).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(patch(&quot;/api/disenos/{id}/terminar&quot;, 1))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).marcarComoTerminado(1);&#10;    }&#10;&#10;    @Test&#10;    void marcarComoEnProgreso_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.marcarComoEnProgreso(1)).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(patch(&quot;/api/disenos/{id}/reabrir&quot;, 1))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).marcarComoEnProgreso(1);&#10;    }&#10;&#10;    @Test&#10;    void eliminarDiseno_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        doNothing().when(disenoService).deleteById(1);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(delete(&quot;/api/disenos/{id}&quot;, 1))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void obtenerDisenosPorUsuario_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.findByUsuario(usuarioId))&#10;                .thenReturn(Collections.singletonList(disenoResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}&quot;, usuarioId))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data[0].nombre&quot;).value(&quot;Diseño Test&quot;));&#10;&#10;        verify(disenoService).findByUsuario(usuarioId);&#10;    }&#10;&#10;    @Test&#10;    void obtenerDisenosPorUsuarioYEstado_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.findByUsuarioAndStatus(usuarioId, DisenoStatus.PROGRESO))&#10;                .thenReturn(Collections.singletonList(disenoResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}/status/{status}&quot;,&#10;                        usuarioId, &quot;PROGRESO&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data[0].status&quot;).value(&quot;PROGRESO&quot;));&#10;&#10;        verify(disenoService).findByUsuarioAndStatus(usuarioId, DisenoStatus.PROGRESO);&#10;    }&#10;&#10;    @Test&#10;    void contarDisenosPorUsuario_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.contarDisenosPorUsuario(usuarioId)).thenReturn(3L);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}/count&quot;, usuarioId))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).value(3));&#10;&#10;        verify(disenoService).contarDisenosPorUsuario(usuarioId);&#10;    }&#10;&#10;    @Test&#10;    void contarDisenosPorUsuarioYEstado_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.contarDisenosPorUsuarioYEstado(usuarioId, DisenoStatus.PROGRESO))&#10;                .thenReturn(2L);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}/count/{status}&quot;,&#10;                        usuarioId, &quot;PROGRESO&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).value(2));&#10;&#10;        verify(disenoService).contarDisenosPorUsuarioYEstado(usuarioId, DisenoStatus.PROGRESO);&#10;    }&#10;}" />
              <option name="updatedContent" value="import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.paper.controller.DisenoController;&#10;import org.paper.dtoCreate.DisenoCreateDto;&#10;import org.paper.dtoCreate.DisenoUpdateDto;&#10;import org.paper.dtoResponse.DisenoResponseDto;&#10;import org.paper.entity.DisenoStatus;&#10;import org.paper.service.DisenoService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;&#10;import org.springframework.boot.test.mock.mockito.MockBean;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.context.ContextConfiguration;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;import java.util.Collections;&#10;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.mockito.ArgumentMatchers.eq;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@WebMvcTest(DisenoController.class)&#10;@ContextConfiguration(classes = org.paper.Main.class)&#10;class DisenoControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @MockBean&#10;    private DisenoService disenoService;&#10;&#10;    private UUID usuarioId;&#10;    private DisenoResponseDto disenoResponseDto;&#10;    private DisenoCreateDto disenoCreateDto;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        usuarioId = UUID.randomUUID();&#10;&#10;        disenoResponseDto = DisenoResponseDto.builder()&#10;                .id(1)&#10;                .nombre(&quot;Diseño Test&quot;)&#10;                .descripcion(&quot;Descripción Test&quot;)&#10;                .status(&quot;PROGRESO&quot;)&#10;                .base64Diseno(&quot;base64string&quot;)&#10;                .plantillaId(1)&#10;                .plantillaNombre(&quot;Plantilla Test&quot;)&#10;                .fechaCreacion(LocalDateTime.now())&#10;                .build();&#10;&#10;        disenoCreateDto = new DisenoCreateDto();&#10;        disenoCreateDto.setUsuarioId(usuarioId);&#10;        disenoCreateDto.setPlantillaId(1);&#10;        disenoCreateDto.setNombre(&quot;Nuevo Diseño&quot;);&#10;        disenoCreateDto.setDescripcion(&quot;Nueva Descripción&quot;);&#10;        disenoCreateDto.setBase64Diseno(&quot;base64string&quot;);&#10;    }&#10;&#10;    @Test&#10;    void crearDiseno_DeberiaRetornar201() throws Exception {&#10;        // Arrange&#10;        when(disenoService.save(any(DisenoCreateDto.class))).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(post(&quot;/api/disenos&quot;)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(disenoCreateDto)))&#10;                .andExpect(status().isCreated())&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Diseño Test&quot;));&#10;&#10;        verify(disenoService).save(any(DisenoCreateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void obtenerDisenoPorId_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.findById(1)).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/{id}&quot;, 1))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Diseño Test&quot;))&#10;                .andExpect(jsonPath(&quot;$.data.status&quot;).value(&quot;PROGRESO&quot;));&#10;&#10;        verify(disenoService).findById(1);&#10;    }&#10;&#10;    @Test&#10;    void actualizarDiseno_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        DisenoUpdateDto updateDto = new DisenoUpdateDto();&#10;        updateDto.setNombre(&quot;Diseño Actualizado&quot;);&#10;        updateDto.setDescripcion(&quot;Descripción Actualizada&quot;);&#10;&#10;        when(disenoService.update(eq(1), any(DisenoUpdateDto.class)))&#10;                .thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(put(&quot;/api/disenos/{id}&quot;, 1)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(updateDto)))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).update(eq(1), any(DisenoUpdateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void marcarComoTerminado_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.marcarComoTerminado(1)).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(patch(&quot;/api/disenos/{id}/terminar&quot;, 1))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).marcarComoTerminado(1);&#10;    }&#10;&#10;    @Test&#10;    void marcarComoEnProgreso_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.marcarComoEnProgreso(1)).thenReturn(disenoResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(patch(&quot;/api/disenos/{id}/reabrir&quot;, 1))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).marcarComoEnProgreso(1);&#10;    }&#10;&#10;    @Test&#10;    void eliminarDiseno_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        doNothing().when(disenoService).deleteById(1);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(delete(&quot;/api/disenos/{id}&quot;, 1))&#10;                .andExpect(status().isOk());&#10;&#10;        verify(disenoService).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void obtenerDisenosPorUsuario_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.findByUsuario(usuarioId))&#10;                .thenReturn(Collections.singletonList(disenoResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}&quot;, usuarioId))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data[0].nombre&quot;).value(&quot;Diseño Test&quot;));&#10;&#10;        verify(disenoService).findByUsuario(usuarioId);&#10;    }&#10;&#10;    @Test&#10;    void obtenerDisenosPorUsuarioYEstado_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.findByUsuarioAndStatus(usuarioId, DisenoStatus.PROGRESO))&#10;                .thenReturn(Collections.singletonList(disenoResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}/status/{status}&quot;,&#10;                        usuarioId, &quot;PROGRESO&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data[0].status&quot;).value(&quot;PROGRESO&quot;));&#10;&#10;        verify(disenoService).findByUsuarioAndStatus(usuarioId, DisenoStatus.PROGRESO);&#10;    }&#10;&#10;    @Test&#10;    void contarDisenosPorUsuario_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.contarDisenosPorUsuario(usuarioId)).thenReturn(3L);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}/count&quot;, usuarioId))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).value(3));&#10;&#10;        verify(disenoService).contarDisenosPorUsuario(usuarioId);&#10;    }&#10;&#10;    @Test&#10;    void contarDisenosPorUsuarioYEstado_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(disenoService.contarDisenosPorUsuarioYEstado(usuarioId, DisenoStatus.PROGRESO))&#10;                .thenReturn(2L);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/disenos/usuario/{usuarioId}/count/{status}&quot;,&#10;                        usuarioId, &quot;PROGRESO&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).value(2));&#10;&#10;        verify(disenoService).contarDisenosPorUsuarioYEstado(usuarioId, DisenoStatus.PROGRESO);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/TipoBolsaControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/TipoBolsaControllerTest.java" />
              <option name="originalContent" value="import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.paper.controller.TipoBolsaController;&#10;import org.paper.dtoCreate.TipoBolsaCreateDto;&#10;import org.paper.dtoCreate.TipoBolsaUpdateDto;&#10;import org.paper.dtoResponse.TipoBolsaResponseDto;&#10;import org.paper.service.TipoBolsaService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;&#10;import org.springframework.boot.test.mock.mockito.MockBean;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.context.ContextConfiguration;&#10;&#10;import java.util.Arrays;&#10;import java.util.Collections;&#10;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.mockito.ArgumentMatchers.eq;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@WebMvcTest(TipoBolsaController.class)&#10;@ContextConfiguration(classes = org.paper.Main.class)&#10;class TipoBolsaControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @MockBean&#10;    private TipoBolsaService tipoBolsaService;&#10;&#10;    private TipoBolsaResponseDto tipoBolsaResponseDto;&#10;    private TipoBolsaCreateDto tipoBolsaCreateDto;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        tipoBolsaResponseDto = TipoBolsaResponseDto.builder()&#10;                .id(1)&#10;                .nombre(&quot;Bolsa con Asa&quot;)&#10;                .build();&#10;&#10;        tipoBolsaCreateDto = new TipoBolsaCreateDto();&#10;        tipoBolsaCreateDto.setNombre(&quot;Bolsa Sin Asa&quot;);&#10;    }&#10;&#10;    @Test&#10;    void obtenerTiposBolsas_DeberiaRetornar200ConLista() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.findAll())&#10;                .thenReturn(Arrays.asList(tipoBolsaResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isArray())&#10;                .andExpect(jsonPath(&quot;$.data[0].nombre&quot;).value(&quot;Bolsa con Asa&quot;))&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 1 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).findAll();&#10;    }&#10;&#10;    @Test&#10;    void obtenerTiposBolsas_DeberiaRetornar200ConListaVacia() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.findAll()).thenReturn(Collections.emptyList());&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isArray())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isEmpty())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 0 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).findAll();&#10;    }&#10;&#10;    @Test&#10;    void obtenerTipoBolsaPorId_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.findById(1)).thenReturn(tipoBolsaResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa/{id}&quot;, 1))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data.id&quot;).value(1))&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Bolsa con Asa&quot;));&#10;&#10;        verify(tipoBolsaService).findById(1);&#10;    }&#10;&#10;    @Test&#10;    void crearTipoBolsa_DeberiaRetornar201() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.save(any(TipoBolsaCreateDto.class)))&#10;                .thenReturn(tipoBolsaResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(post(&quot;/api/tipos-bolsa&quot;)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(tipoBolsaCreateDto)))&#10;                .andExpect(status().isCreated())&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Bolsa con Asa&quot;))&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Tipo de bolsa creado exitosamente&quot;));&#10;&#10;        verify(tipoBolsaService).save(any(TipoBolsaCreateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void crearTipoBolsa_DeberiaRetornar400CuandoNombreVacio() throws Exception {&#10;        // Arrange&#10;        TipoBolsaCreateDto dtoInvalido = new TipoBolsaCreateDto();&#10;        dtoInvalido.setNombre(&quot;&quot;); // Nombre vacío&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(post(&quot;/api/tipos-bolsa&quot;)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(dtoInvalido)))&#10;                .andExpect(status().isBadRequest());&#10;&#10;        verify(tipoBolsaService, never()).save(any());&#10;    }&#10;&#10;    @Test&#10;    void actualizarTipoBolsa_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        TipoBolsaUpdateDto updateDto = new TipoBolsaUpdateDto();&#10;        updateDto.setNombre(&quot;Bolsa Americana&quot;);&#10;&#10;        when(tipoBolsaService.update(eq(1), any(TipoBolsaUpdateDto.class)))&#10;                .thenReturn(tipoBolsaResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(put(&quot;/api/tipos-bolsa/{id}&quot;, 1)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(updateDto)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Tipo de bolsa actualizado exitosamente&quot;));&#10;&#10;        verify(tipoBolsaService).update(eq(1), any(TipoBolsaUpdateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void eliminarTipoBolsa_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        doNothing().when(tipoBolsaService).deleteById(1);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(delete(&quot;/api/tipos-bolsa/{id}&quot;, 1))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Tipo de bolsa eliminado exitosamente&quot;));&#10;&#10;        verify(tipoBolsaService).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void buscarTiposBolsa_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.searchByNombre(&quot;asa&quot;))&#10;                .thenReturn(Arrays.asList(tipoBolsaResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa/search&quot;)&#10;                        .param(&quot;nombre&quot;, &quot;asa&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data[0].nombre&quot;).value(&quot;Bolsa con Asa&quot;))&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 1 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).searchByNombre(&quot;asa&quot;);&#10;    }&#10;&#10;    @Test&#10;    void buscarTiposBolsa_DeberiaRetornar200ConListaVacia() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.searchByNombre(&quot;noexiste&quot;))&#10;                .thenReturn(Collections.emptyList());&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa/search&quot;)&#10;                        .param(&quot;nombre&quot;, &quot;noexiste&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isEmpty())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 0 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).searchByNombre(&quot;noexiste&quot;);&#10;    }&#10;}" />
              <option name="updatedContent" value="import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.paper.controller.TipoBolsaController;&#10;import org.paper.dtoCreate.TipoBolsaCreateDto;&#10;import org.paper.dtoCreate.TipoBolsaUpdateDto;&#10;import org.paper.dtoResponse.TipoBolsaResponseDto;&#10;import org.paper.service.TipoBolsaService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;&#10;import org.springframework.boot.test.mock.mockito.MockBean;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.context.ContextConfiguration;&#10;&#10;import java.util.Collections;&#10;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.mockito.ArgumentMatchers.eq;&#10;import static org.mockito.Mockito.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@WebMvcTest(TipoBolsaController.class)&#10;@ContextConfiguration(classes = org.paper.Main.class)&#10;class TipoBolsaControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @MockBean&#10;    private TipoBolsaService tipoBolsaService;&#10;&#10;    private TipoBolsaResponseDto tipoBolsaResponseDto;&#10;    private TipoBolsaCreateDto tipoBolsaCreateDto;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        tipoBolsaResponseDto = TipoBolsaResponseDto.builder()&#10;                .id(1)&#10;                .nombre(&quot;Bolsa con Asa&quot;)&#10;                .build();&#10;&#10;        tipoBolsaCreateDto = new TipoBolsaCreateDto();&#10;        tipoBolsaCreateDto.setNombre(&quot;Bolsa Sin Asa&quot;);&#10;    }&#10;&#10;    @Test&#10;    void obtenerTiposBolsas_DeberiaRetornar200ConLista() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.findAll())&#10;                .thenReturn(Collections.singletonList(tipoBolsaResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isArray())&#10;                .andExpect(jsonPath(&quot;$.data[0].nombre&quot;).value(&quot;Bolsa con Asa&quot;))&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 1 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).findAll();&#10;    }&#10;&#10;    @Test&#10;    void obtenerTiposBolsas_DeberiaRetornar200ConListaVacia() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.findAll()).thenReturn(Collections.emptyList());&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isArray())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isEmpty())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 0 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).findAll();&#10;    }&#10;&#10;    @Test&#10;    void obtenerTipoBolsaPorId_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.findById(1)).thenReturn(tipoBolsaResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa/{id}&quot;, 1))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data.id&quot;).value(1))&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Bolsa con Asa&quot;));&#10;&#10;        verify(tipoBolsaService).findById(1);&#10;    }&#10;&#10;    @Test&#10;    void crearTipoBolsa_DeberiaRetornar201() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.save(any(TipoBolsaCreateDto.class)))&#10;                .thenReturn(tipoBolsaResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(post(&quot;/api/tipos-bolsa&quot;)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(tipoBolsaCreateDto)))&#10;                .andExpect(status().isCreated())&#10;                .andExpect(jsonPath(&quot;$.data.nombre&quot;).value(&quot;Bolsa con Asa&quot;))&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Tipo de bolsa creado exitosamente&quot;));&#10;&#10;        verify(tipoBolsaService).save(any(TipoBolsaCreateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void crearTipoBolsa_DeberiaRetornar400CuandoNombreVacio() throws Exception {&#10;        // Arrange&#10;        TipoBolsaCreateDto dtoInvalido = new TipoBolsaCreateDto();&#10;        dtoInvalido.setNombre(&quot;&quot;); // Nombre vacío&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(post(&quot;/api/tipos-bolsa&quot;)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(dtoInvalido)))&#10;                .andExpect(status().isBadRequest());&#10;&#10;        verify(tipoBolsaService, never()).save(any());&#10;    }&#10;&#10;    @Test&#10;    void actualizarTipoBolsa_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        TipoBolsaUpdateDto updateDto = new TipoBolsaUpdateDto();&#10;        updateDto.setNombre(&quot;Bolsa Americana&quot;);&#10;&#10;        when(tipoBolsaService.update(eq(1), any(TipoBolsaUpdateDto.class)))&#10;                .thenReturn(tipoBolsaResponseDto);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(put(&quot;/api/tipos-bolsa/{id}&quot;, 1)&#10;                        .contentType(MediaType.APPLICATION_JSON)&#10;                        .content(objectMapper.writeValueAsString(updateDto)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Tipo de bolsa actualizado exitosamente&quot;));&#10;&#10;        verify(tipoBolsaService).update(eq(1), any(TipoBolsaUpdateDto.class));&#10;    }&#10;&#10;    @Test&#10;    void eliminarTipoBolsa_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        doNothing().when(tipoBolsaService).deleteById(1);&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(delete(&quot;/api/tipos-bolsa/{id}&quot;, 1))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Tipo de bolsa eliminado exitosamente&quot;));&#10;&#10;        verify(tipoBolsaService).deleteById(1);&#10;    }&#10;&#10;    @Test&#10;    void buscarTiposBolsa_DeberiaRetornar200() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.searchByNombre(&quot;asa&quot;))&#10;                .thenReturn(Collections.singletonList(tipoBolsaResponseDto));&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa/search&quot;)&#10;                        .param(&quot;nombre&quot;, &quot;asa&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data[0].nombre&quot;).value(&quot;Bolsa con Asa&quot;))&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 1 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).searchByNombre(&quot;asa&quot;);&#10;    }&#10;&#10;    @Test&#10;    void buscarTiposBolsa_DeberiaRetornar200ConListaVacia() throws Exception {&#10;        // Arrange&#10;        when(tipoBolsaService.searchByNombre(&quot;noexiste&quot;))&#10;                .thenReturn(Collections.emptyList());&#10;&#10;        // Act &amp; Assert&#10;        mockMvc.perform(get(&quot;/api/tipos-bolsa/search&quot;)&#10;                        .param(&quot;nombre&quot;, &quot;noexiste&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.data&quot;).isEmpty())&#10;                .andExpect(jsonPath(&quot;$.message&quot;).value(&quot;Se encontraron 0 tipos de bolsa&quot;));&#10;&#10;        verify(tipoBolsaService).searchByNombre(&quot;noexiste&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>