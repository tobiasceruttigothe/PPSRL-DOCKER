version: "3.9"

services:
  kc-postgres:
    image: postgres:16-alpine
    container_name: kc-postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - kc_pgdata:/var/lib/postgresql/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: keycloak
    depends_on:
      kc-postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL_HOST: kc-postgres
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HOSTNAME_STRICT: "false"
      KC_HTTP_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
    command: start-dev
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e 'GET /health/ready HTTP/1.1\r\nConnection: close\r\n\r\n' >&3;grep -q '200 OK' <&3"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  app-postgres:
    image: postgres:16-alpine
    container_name: app-postgres
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
    ports:
      - "5433:5432"
    volumes:
      - app_pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  users-service:
    build:
      context: ./Users-service
      dockerfile: Dockerfile
    container_name: users-service
    depends_on:
      app-postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    ports:
      - "9091:9091"
    environment:
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: tesina
      KEYCLOAK_CLIENT_ID: backend-service
      KEYCLOAK_CLIENT_SECRET: siZIjoNYryGmXBPAhafsYMTyW0WtnU6z
      SPRING_DATASOURCE_URL: jdbc:postgresql://app-postgres:5432/appdb
      SPRING_DATASOURCE_USERNAME: appuser
      SPRING_DATASOURCE_PASSWORD: apppass
      SPRING_MAIL_HOST: smtp.gmail.com
      SPRING_MAIL_PORT: 587
      SPRING_MAIL_USERNAME: no.reply.papersrl@gmail.com
      SPRING_MAIL_PASSWORD: "tmqh uzrt kdnt kzum"
      APP_FRONTEND_URL: http://localhost:5173
      APP_JWT_SECRET: a9L3vT7xQ2mN8bR4K0uY1pZ6WdCfJsXeH
      APP_JWT_EXPIRATION_MS: 86400000
      JAVA_OPTS: "-Xms256m -Xmx512m"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9091/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  api-gateway:
    build:
      context: ./api-gw
      dockerfile: Dockerfile
    container_name: api-gateway
    depends_on:
      users-service:
        condition: service_healthy
    ports:
      - "9090:9090"
    environment:
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/tesina/protocol/openid-connect/certs
      API_GW_URL_MICROSERVICIO_USUARIOS: http://users-service:9091
      APP_RATE_LIMIT_DEFAULT_CAPACITY: 20
      APP_RATE_LIMIT_DEFAULT_REFILL_TOKENS: 10
      JAVA_OPTS: "-Xms256m -Xmx512m"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  backend-network:
    driver: bridge

volumes:
  kc_pgdata:
  app_pgdata:
